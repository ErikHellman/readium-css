/* Readium CSS 
   User Overrides

   A stylesheet to manage user settings

   Repo: https://github.com/readium/readium-css */

/* Variables are added to html (setProperty -> style) */

/* Number of columns = 1 | 2 */

:root[style*="--USER__colNumber"] {
  -webkit-column-count: var(--USER__colNumber);
  -moz-column-count: var(--USER__colNumber);
  column-count: var(--USER__colNumber);
}

:root[style*="--USER__colNumber: 2"],
:root[style*="--USER__colNumber:2"] {
  -webkit-column-width: auto;
  -moz-column-width: auto;
  column-width: auto;
}

/* Page Margins */

:root[style*="--USER__pageMargins"] body {
  padding: 0 var(--USER__pageMargins) !important;
}

/* Colors/Themes */
/* Night mode: #000000 + #FEFEFE */
/* Sepia mode: #faf4e8 + #121212 */

:root[style*="--USER__backgroundColor"] {
  background-color: var(--USER__backgroundColor) !important;
}

:root[style*="--USER__textColor"] {
  color: var(--USER__textColor) !important;
}

:root[style*="--USER__textColor"] *:not(h1):not(h2):not(h3):not(h4):not(h5):not(h6):not(pre) {
  color: inherit !important;
}

/* Night mode */
:root[style*="--USER__backgroundColor"][style*="#000000"] *:not(a) {
  background-color: transparent !important;
  color: var(--USER__textColor) !important;
  border-color: currentColor !important;
}

:root[style*="--USER__backgroundColor"][style*="#000000"] svg text {
  fill: var(--USER__textColor) !important;
  stroke: none !important;
}

:root[style*="--USER__backgroundColor"][style*="#000000"] a:link,
:root[style*="--USER__backgroundColor"][style*="#000000"] a:link * {
  color: #63caff !important;
}

:root[style*="--USER__backgroundColor"][style*="#000000"] a:visited,
:root[style*="--USER__backgroundColor"][style*="#000000"] a:visited * {
  color: #0099E5 !important;
}

:root[style*="--USER__backgroundColor"][style*="#000000"] img[class*="gaiji"],
:root[style*="--USER__backgroundColor"][style*="#000000"] *[epub\:type~="titlepage"] img,
:root[style*="--USER__backgroundColor"][style*="#000000"] img.readiumCSS-invert {
  -webkit-filter: invert(1);
  filter: invert(1);
}

/* Sepia Mode*/
:root[style*="--USER__backgroundColor"][style*="#faf4e8"] body {
  background-color: transparent;
  color: var(--USER__textColor);
}

:root[style*="--USER__backgroundColor"][style*="#faf4e8"] svg,
:root[style*="--USER__backgroundColor"][style*="#faf4e8"] img {
  mix-blend-mode: multiply;
}

/* Text Align */

:root[style*="--USER__textAlign"] {
  text-align: var(--USER__textAlign) !important;
}

:root[style*="--USER__textAlign"] body,
:root[style*="--USER__textAlign"] *:not(blockquote):not(figcaption) p, 
:root[style*="--USER__textAlign"] li {
  text-align: inherit;
}

/* Hyphens (none | auto) */

:root[style*="--USER__bodyHyphens"] {
  -webkit-hyphens: var(--USER__bodyHyphens) !important;
  -moz-hyphens: var(--USER__bodyHyphens) !important;
  -ms-hyphens: var(--USER__bodyHyphens) !important;
  -epub-hyphens: var(--USER__bodyHyphens) !important;
  hyphens: var(--USER__bodyHyphens) !important;
}

:root[style*="--USER__bodyHyphens"] body,
:root[style*="--USER__bodyHyphens"] p,
:root[style*="--USER__bodyHyphens"] li,
:root[style*="--USER__bodyHyphens"] div {
  -webkit-hyphens: inherit;
  -moz-hyphens: inherit;
  -ms-hyphens: inherit;
  -epub-hyphens: inherit;
  hyphens: inherit;
}

/* Font family (typeface) */

:root[style*="--USER__fontFamily"] {
  font-family: var(--USER__fontFamily) !important;
}

:root[style*="--USER__fontFamily"] body,
:root[style*="--USER__fontFamily"] p,
:root[style*="--USER__fontFamily"] li,
:root[style*="--USER__fontFamily"] div,
:root[style*="--USER__fontFamily"] dt,
:root[style*="--USER__fontFamily"] dd {
  font-family: inherit !important;
}

/* Font size */

:root[style*="--USER__fontSize"] {
  font-size: var(--USER__fontSize) !important;
}

/* 1.2 value for typescale is probably the one we want as a default as it covers most publishers’ CSS */
:root[style*="--USER__fontSize"][style*="--USER__typeScale"] h1 {
  font-size: calc(((var(--USER__fontSize) * var(--USER__typeScale)) * var(--USER__typeScale)) * var(--USER__typeScale));
}

:root[style*="--USER__fontSize"][style*="--USER__typeScale"] h2 {
  font-size: calc((var(--USER__fontSize) * var(--USER__typeScale)) * var(--USER__typeScale));
}

:root[style*="--USER__fontSize"][style*="--USER__typeScale"] h3 {
  font-size: calc(var(--USER__fontSize) * var(--USER__typeScale));
}

:root[style*="--USER__fontSize"][style*="--USER__typeScale"] h4 {
  font-size: var(--USER__fontSize);
}

:root[style*="--USER__fontSize"][style*="--USER__typeScale"] h5,
:root[style*="--USER__fontSize"][style*="--USER__typeScale"] small {
  font-size: calc(var(--USER__fontSize) / var(--USER__typeScale));
}

:root[style*="--USER__fontSize"][style*="--USER__typeScale"] h6,
:root[style*="--USER__fontSize"][style*="--USER__typeScale"] sub,
:root[style*="--USER__fontSize"][style*="--USER__typeScale"] sup {
  font-size: calc((var(--USER__fontSize) / var(--USER__typeScale)) / var(--USER__typeScale));
}

:root[style*="--USER__fontSize"][style*="--USER__typeScale"] p,
:root[style*="--USER__fontSize"][style*="--USER__typeScale"] li,
:root[style*="--USER__fontSize"][style*="--USER__typeScale"] div,
:root[style*="--USER__fontSize"][style*="--USER__typeScale"] pre {
  font-size: var(--USER__fontSize);
}

/* Line height */

:root[style*="--USER__lineHeight"] {
  line-height: var(--USER__lineHeight) !important;
}

:root[style*="--USER__lineHeight"] body,
:root[style*="--USER__lineHeight"] p,
:root[style*="--USER__lineHeight"] li
:root[style*="--USER__lineHeight"] div {
  line-height: inherit;
}

/* Para spacing (paragraphs’ vertical margins) */

:root[style*="--USER__paraSpacing"] p {
  margin-top: var(--USER__paraSpacing) !important;
  margin-bottom: var(--USER__paraSpacing) !important;
}

/* Para indent (text indent) */

:root[style*="--USER__paraIndent"] p {
  text-indent: var(--USER__paraIndent) !important;
}

/* Word spacing and letter spacing */

:root[style*="--USER__wordSpacing"] h1,
:root[style*="--USER__wordSpacing"] h2,
:root[style*="--USER__wordSpacing"] h3,
:root[style*="--USER__wordSpacing"] h4,
:root[style*="--USER__wordSpacing"] h5,
:root[style*="--USER__wordSpacing"] h6,
:root[style*="--USER__wordSpacing"] p,
:root[style*="--USER__wordSpacing"] li,
:root[style*="--USER__wordSpacing"] div {
  word-spacing: var(--USER__wordSpacing);
}

:root[style*="--USER__letterSpacing"] h1,
:root[style*="--USER__letterSpacing"] h2,
:root[style*="--USER__letterSpacing"] h3,
:root[style*="--USER__letterSpacing"] h4,
:root[style*="--USER__letterSpacing"] h5,
:root[style*="--USER__letterSpacing"] h6,
:root[style*="--USER__letterSpacing"] p,
:root[style*="--USER__letterSpacing"] li,
:root[style*="--USER__letterSpacing"] div {
  letter-spacing: var(--USER__letterSpacing);
}

/* If/Else Territory depending on whether a variable is set or not…

If/else can be emulated with attributes such as p[style*="family"]

p[style] {
  color: unset !important;
  background-color: unset !important;
  font-family: unset !important;
  line-height: unset !important;
  -webkit-hyphens: unset !important;
  -moz-hyphens: unset !important;
  -ms-hyphens: unset !important;
  -epub-hyphens: unset !important;
  hyphens: unset !important;
  text-align: unset !important;
  padding: unset !important;
  margin-top: unset !important;
  margin-bottom: unset !important;
  text-align: unset !important;
}

span[style] {
  color: unset !important;
  background-color: unset !important;
  font-family: unset !important;
}

*/